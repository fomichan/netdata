
spring:
  datasource:
#    url: jdbc:postgresql://localhost:5434/postgres
#    username: postgres
#    password: pass

    # Если в environment variables не будет POSTGRES_DATABASE_URL, USERNAME, PASS (с подключением к Heroku), то запустится локальный
    url: ${HEROKU_POSTGRES_DB_URL:jdbc:postgresql://localhost:5434/postgres}
    username: ${HEROKU_POSTGRES_DB_USERNAME:postgres}
    password: ${HEROKU_POSTGRES_DB_PASS:pass}

    driver-class-name: org.postgresql.Driver

  jpa:
#    generate-ddl: false
#    show-sql: false
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        hbm2ddl.auto: validate
    open-in-view: false  # чтобы транзакции не открывались на уровне контроллеров


  security:
    oauth2:
      client:
        registration:
          google:
#            clientId: 450835446042-ooief0mui0ker3ir2j8n3j6baokoo6b7.apps.googleusercontent.com
#            clientSecret: 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
            clientId: ${GOOGLE_OAUTH_CLIENT_ID}
            clientSecret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            redirectUri: http://localhost:8080/login/oauth2/code/google
            scope: openid,email,profile


logging:
  level:
    root: INFO
    org.springframework.jdbc.core: TRACE
  file:
    name: mylog.log
    path: /


# авторизация для swagger
springdoc:
  swagger-ui:
    oauth:
#      client-id: 450835446042-ooief0mui0ker3ir2j8n3j6baokoo6b7.apps.googleusercontent.com
#      client-secret: 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
      client-id: ${GOOGLE_OAUTH_CLIENT_ID}
      client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
      scopes: openid,email,profile
    oauth2-redirect-url: http://localhost:8080/swagger-ui/oauth2-redirect


# Для heroku
server:
  port: ${PORT:8080}


